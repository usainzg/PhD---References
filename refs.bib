@inproceedings{Chen2018LearningTO,
  title={Learning to Optimize Tensor Programs},
  author={Tianqi Chen and Lianmin Zheng and Eddie Q. Yan and Ziheng Jiang and Thierry Moreau and Luis Ceze and Carlos Guestrin and Arvind Krishnamurthy},
  booktitle={Neural Information Processing Systems},
  year={2018},
  url={https://api.semanticscholar.org/CorpusID:29160233}
}
@inproceedings{Bondhugula2008APA,
  title={A practical automatic polyhedral parallelizer and locality optimizer},
  author={Uday Bondhugula and Albert Hartono and J. Ramanujam and P. Sadayappan},
  booktitle={ACM-SIGPLAN Symposium on Programming Language Design and Implementation},
  year={2008},
  url={https://api.semanticscholar.org/CorpusID:7086982}
}
@article{RaganKelley2013HalideAL,
  title={Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines},
  author={Jonathan Ragan-Kelley and Connelly Barnes and Andrew Adams and Sylvain Paris and Fr{\'e}do Durand and Saman P. Amarasinghe},
  journal={Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year={2013},
  url={https://api.semanticscholar.org/CorpusID:5885207}
}
@article{Wang2021TunaAS,
  title={Tuna: A Static Analysis Approach to Optimizing Deep Neural Networks},
  author={Yao Wang and Xingyu Zhou and Yanming Wang and Rui Li and Yong Wu and Vin Sharma},
  journal={ArXiv},
  year={2021},
  volume={abs/2104.14641},
  url={https://api.semanticscholar.org/CorpusID:233476551}
}
@inproceedings{Chen2018TVMAA,
  title={TVM: An Automated End-to-End Optimizing Compiler for Deep Learning},
  author={Tianqi Chen and Thierry Moreau and Ziheng Jiang and Haichen Shen and Eddie Q. Yan and Leyuan Wang and Yuwei Hu and Luis Ceze and Carlos Guestrin and Arvind Krishnamurthy},
  year={2018},
  url={https://api.semanticscholar.org/CorpusID:3296374}
}
@article{Tavarageri2020PolyScientistAL,
  title={PolyScientist: Automatic Loop Transformations Combined with Microkernels for Optimization of Deep Learning Primitives},
  author={Sanket Tavarageri and Alexander Heinecke and Sasikanth Avancha and Gagandeep Goyal and Ramakrishna Upadrasta and Bharat Kaul},
  journal={ArXiv},
  year={2020},
  volume={abs/2002.02145},
  url={https://api.semanticscholar.org/CorpusID:211043676}
}
@article{Georganas2019HighPerformanceDL,
  title={High-Performance Deep Learning via a Single Building Block},
  author={Evangelos Georganas and Kunal Banerjee and Dhiraj D. Kalamkar and Sasikanth Avancha and Anand Venkat and Michael J. Anderson and Greg M. Henry and Hans Pabst and Alexander Heinecke},
  journal={ArXiv},
  year={2019},
  volume={abs/1906.06440},
  url={https://api.semanticscholar.org/CorpusID:189928487}
}
@article{Hwang2017IndatacenterPA,
  title={In-datacenter performance analysis of a tensor processing unit},
  author={DONG-HYUN Hwang},
  journal={2017 ACM/IEEE 44th Annual International Symposium on Computer Architecture (ISCA)},
  year={2017},
  pages={1-12},
  url={https://api.semanticscholar.org/CorpusID:4202768}
}
@inproceedings{Rosen1988GlobalVN,
  title={Global value numbers and redundant computations},
  author={Barry K. Rosen and Mark N. Wegman and F. Kenneth Zadeck},
  booktitle={ACM-SIGACT Symposium on Principles of Programming Languages},
  year={1988},
  url={https://api.semanticscholar.org/CorpusID:9876007}
}
@article{Feng2022TensorIRAA,
  title={TensorIR: An Abstraction for Automatic Tensorized Program Optimization},
  author={Siyuan Feng and Bohan Hou and Hongyi Jin and Wuwei Lin and Junru Shao and Ruihang Lai and Zihao Ye and Lianmin Zheng and Cody Hao Yu and Yong Yu and Tianqi Chen},
  journal={Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 2},
  year={2022},
  url={https://api.semanticscholar.org/CorpusID:250425865}
}
@article{Paliwal2019ReinforcedGA,
  title={Reinforced Genetic Algorithm Learning for Optimizing Computation Graphs},
  author={Aditya Sanjay Paliwal and Felix Gimeno and Vinod Nair and Yujia Li and Miles Lubin and Pushmeet Kohli and Oriol Vinyals},
  journal={arXiv: Learning},
  year={2019},
  url={https://api.semanticscholar.org/CorpusID:202888735}
}


@article{Mendis_2018,
   title={goSLP: globally optimized superword level parallelism framework},
   volume={2},
   ISSN={2475-1421},
   url={http://dx.doi.org/10.1145/3276480},
   DOI={10.1145/3276480},
   number={OOPSLA},
   journal={Proceedings of the ACM on Programming Languages},
   publisher={Association for Computing Machinery (ACM)},
   author={Mendis, Charith and Amarasinghe, Saman},
   year={2018},
   month=oct, pages={1–28} }
@inproceedings{ketterlin2008prediction,
  title={Prediction and trace compression of data access addresses through nested loop recognition},
  author={Ketterlin, Alain and Clauss, Philippe},
  booktitle={Proceedings of the 6th annual IEEE/ACM international symposium on Code generation and optimization},
  pages={94--103},
  year={2008}
}
@inproceedings{bastoul2004code,
  title={Code generation in the polyhedral model is easier than you think},
  author={Bastoul, C{\'e}dric},
  booktitle={Proceedings. 13th International Conference on Parallel Architecture and Compilation Techniques, 2004. PACT 2004.},
  pages={7--16},
  year={2004},
  organization={IEEE}
}
@article{feautrier1992some,
  title={Some efficient solutions to the affine scheduling problem. Part II. Multidimensional time},
  author={Feautrier, Paul},
  journal={International journal of parallel programming},
  volume={21},
  pages={389--420},
  year={1992},
  publisher={Springer}
}
@inproceedings{bondhugula2008practical,
  title={A practical automatic polyhedral parallelizer and locality optimizer},
  author={Bondhugula, Uday and Hartono, Albert and Ramanujam, Jagannathan and Sadayappan, Ponnuswamy},
  booktitle={Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={101--113},
  year={2008}
}
@misc{kelly1998framework,
  title={A framework for unifying reordering transformations},
  author={Kelly, Wayne and Pugh, William},
  year={1998}
}
@inproceedings{baghdadi2019tiramisu,
  title={Tiramisu: A polyhedral compiler for expressing fast and portable code},
  author={Baghdadi, Riyadh and Ray, Jessica and Romdhane, Malek Ben and Del Sozzo, Emanuele and Akkas, Abdurrahman and Zhang, Yunming and Suriana, Patricia and Kamil, Shoaib and Amarasinghe, Saman},
  booktitle={2019 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)},
  pages={193--205},
  year={2019},
  organization={IEEE}
}
@inproceedings{bastoul2023superloop,
  title={Superloop Scheduling: Loop Optimization via Direct Statement Instance Reordering},
  author={Bastoul, Cedric and Ketterlin, Alain and Loechner, Vincent},
  booktitle={IMPACT 2023},
  year={2023}
}
@inproceedings{48842,title	= {Scalable Polyhedral Compilation, Syntax vs. Semantics: 1–0 in the First Round},author	= {Riyadh Baghdadi and Albert Cohen},year	= {2020},note	= {Informal proceedings.},booktitle	= {IMPACT 2020 workshop (associated with HIPEAC 2020)}}
@article{khan2020polyhedral,
  title={Polyhedral compilation for racetrack memories},
  author={Khan, Asif Ali and Mewes, Hauke and Grosser, Tobias and Hoefler, Torsten and Castrillon, Jeronimo},
  journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume={39},
  number={11},
  pages={3968--3980},
  year={2020},
  publisher={IEEE}
}
@article{leben2019polyhedral,
  title={Polyhedral Compilation for Multi-dimensional Stream Processing},
  author={Leben, Jakob and Tzanetakis, George},
  journal={ACM Transactions on Architecture and Code Optimization (TACO)},
  volume={16},
  number={3},
  pages={1--26},
  year={2019},
  publisher={ACM New York, NY, USA}
}
@article{Abdelaal2021TileSS,
  title={Tile size selection of affine programs for GPGPUs using polyhedral cross-compilation},
  author={Kh. K. Abdelaal and Martin Kong},
  journal={Proceedings of the ACM International Conference on Supercomputing},
  year={2021},
  url={https://api.semanticscholar.org/CorpusID:235337423}
}
@article{Cong2018PolySAPS,
  title={PolySA: Polyhedral-Based Systolic Array Auto-Compilation},
  author={Jason Cong and Jie Wang},
  journal={2018 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)},
  year={2018},
  pages={1-8},
  url={https://api.semanticscholar.org/CorpusID:51997145}
}
@article{Wang2021AutoSAAP,
  title={AutoSA: A Polyhedral Compiler for High-Performance Systolic Arrays on FPGA},
  author={Jie Wang and Licheng Guo and Jason Cong},
  journal={The 2021 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays},
  year={2021},
  url={https://api.semanticscholar.org/CorpusID:229296011}
}
@inproceedings{Benabderrahmane2010ThePM,
  title={The Polyhedral Model Is More Widely Applicable Than You Think},
  author={Mohamed-Walid Benabderrahmane and Louis-No{\"e}l Pouchet and Albert Cohen and C{\'e}dric Bastoul},
  booktitle={International Conference on Compiler Construction},
  year={2010},
  url={https://api.semanticscholar.org/CorpusID:8032464}
}
@inproceedings{verdoolaege2020generating,
  title={Generating SIMD instructions for cerebras cs-1 using polyhedral compilation techniques},
  author={Verdoolaege, Sven and Kudlur, Manjunath and Schreiber, Rob and Kamepalli, Harinath},
  booktitle={IMPACT 2020-10th International Workshop on Polyhedral Compilation Techniques},
  year={2020}
}
@misc{friebel2022modelling,
  title={Modelling linear algebra kernels as polyhedral volume operations},
  author={Friebel, Karl FA and Khan, Asif Ali and Chelini, Lorenzo and Castrillon, Jeronimo},
  year={2022}
}
@inproceedings{consolaro24-parametrick,
              title     = {ParameTrick: Coefficient Generalization for Faster
                            Polyhedral Scheduling},
              author    = {Consolaro, Gianpietro and Razanajato, Harenome
                            and Lossing, Nelson and Barthou, Denis and 
                            Zhang, Zhen and Ancourt, Corinne and Bastoul, C\'{e}dric},
              booktitle = {14th International Workshop on Polyhedral Compilation Techniques
                           (IMPACT 2024, in conjunction with HiPEAC 2024)},
              year      = 2024,
              url       = {https://impact-workshop.org/impact2024/#consolaro24-parametrick},
            }
@inproceedings{mayer24-fpgas,
              title     = {Employing Polyhedral Methods to Optimize Stencils on FPGAs
                            with Stencil-specific Caches, Data Reuse, and Wide Data Bursts},
              author    = {Mayer, Florian and Brandner, Julian and Philippsen, Michael},
              booktitle = {14th International Workshop on Polyhedral Compilation Techniques
                           (IMPACT 2024, in conjunction with HiPEAC 2024)},
              year      = 2024,
              url       = {https://impact-workshop.org/impact2024/#mayer24-fpgas},
            }

@inproceedings{bondhugulaCompilingAffineLoop2013,
  author       = {Uday Bondhugula},
  editor       = {William Gropp and
                  Satoshi Matsuoka},
  title        = {Compiling affine loop nests for distributed-memory parallel architectures},
  booktitle    = {International Conference for High Performance Computing, Networking,
                  Storage and Analysis, SC'13, Denver, CO, {USA} - November 17 - 21,
                  2013},
  pages        = {33:1--33:12},
  publisher    = {{ACM}},
  year         = {2013},
  url          = {https://doi.org/10.1145/2503210.2503289},
  doi          = {10.1145/2503210.2503289},
  timestamp    = {Wed, 16 Oct 2019 14:14:57 +0200},
  biburl       = {https://dblp.org/rec/conf/sc/Bondhugula13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{dathathriDynamicMemoryAccess2013,
  author       = {Mikhail A. Gorelov and
                  Lev Mukhanov},
  editor       = {Christian Fensch and
                  Michael F. P. O'Boyle and
                  Andr{\'{e}} Seznec and
                  Fran{\c{c}}ois Bodin},
  title        = {Dynamic memory access monitoring based on tagged memory},
  booktitle    = {Proceedings of the 22nd International Conference on Parallel Architectures
                  and Compilation Techniques, Edinburgh, United Kingdom, September 7-11,
                  2013},
  pages        = {409},
  publisher    = {{IEEE} Computer Society},
  year         = {2013},
  url          = {https://doi.org/10.1109/PACT.2013.6618840},
  doi          = {10.1109/PACT.2013.6618840},
  timestamp    = {Fri, 24 Mar 2023 00:02:44 +0100},
  biburl       = {https://dblp.org/rec/conf/IEEEpact/GorelovM13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{reddyEffectiveAutomaticComputation2014,
author = {Reddy, Chandan and Bondhugula, Uday},
title = {Effective automatic computation placement and data allocation for parallelization of regular programs},
year = {2014},
isbn = {9781450326421},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2597652.2597673},
doi = {10.1145/2597652.2597673},
abstract = {This paper proposes techniques for data allocation and computation mapping when compiling affine loop nest sequences for distributed-memory clusters.Techniques for transformation and detection of parallelism, and generation of communication sets relying on the polyhedral framework already exist. However, these recent approaches used a simple strategy to map computation to nodes -- typically block or block-cyclic. These mappings may lead to excess communication volume for multiple loop nests. In addition, the data allocation strategy used did not permit efficient weak scaling. We address these complementary problems by proposing automatic techniques to determine computation placements for identified parallelism and allocation of data. Our approach for data allocation is driven by tiling of data spaces along with a scheme to allocate and deallocate tiles on demand and reuse them. We show that our approach for computation mapping yields more effective mappings than those that can be developed using vendor-supplied libraries. Experimental results on some sequences of BLAS calls demonstrate a mean speedup of 1.82x over versions written with ScaLAPACK. Besides enabling weak scaling for distributed memory, data tiling also improves locality for shared-memory parallelization. Experimental results on a 32-core shared-memory SMP system shows a mean speedup of 2.67x over code that is not data tiled.},
booktitle = {Proceedings of the 28th ACM International Conference on Supercomputing},
pages = {13–22},
numpages = {10},
keywords = {automatic parallelization, computation placement, data distribution, distributed memory, polyhedral model},
location = {Munich, Germany},
series = {ICS '14}
}